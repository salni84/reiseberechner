import * as tslib_1 from "tslib";
import { searchAndInitialize } from "../Utils";
import DomElement from "../DomElement";
import * as Dom from "../DomFunctions";
var QUERY_TEXTAREA = "textarea";
var CLASS_HAS_VALUE = "is-fixed";
/**
 * Textarea component
 */
var Textarea = /** @class */ (function (_super) {
    tslib_1.__extends(Textarea, _super);
    function Textarea(element) {
        var _this = _super.call(this, element) || this;
        _this._area = _this.element.querySelector(QUERY_TEXTAREA);
        _this._focusChangedHandler = _this._focusChanged.bind(_this);
        _this._valueChangedHandler = _this._onValueChanged.bind(_this);
        _this._resizeHandler = _this._updateHeight.bind(_this);
        _this._initialize();
        return _this;
    }
    /**
     * Initializes the textarea component.
     * @private
     */
    Textarea.prototype._initialize = function () {
        this._minRows = parseInt(this._area.getAttribute("data-min-rows") || "3", 10);
        this._maxRows = parseInt(this._area.getAttribute("data-max-rows"), 10) || Number.MAX_SAFE_INTEGER;
        // Make sure min an max are property specified
        this._minRows = Math.min(this._minRows, this._maxRows);
        this._maxRows = Math.max(this._minRows, this._maxRows);
        this._lineHeight = parseInt(Dom.css(this._area, "line-height"), 10);
        this._updateBaseHeight = Dom.isHidden(this._area, true);
        this._calculateBaseHeight();
        // add event listeners
        this._area.addEventListener("focus", this._focusChangedHandler);
        this._area.addEventListener("blur", this._focusChangedHandler);
        this._area.addEventListener("input", this._valueChangedHandler);
        window.addEventListener("resize", this._resizeHandler);
        window.addEventListener("orientationchange", this._resizeHandler);
        this._onValueChanged();
    };
    Textarea.prototype._calculateBaseHeight = function () {
        // temporary clear the content to take measurements
        var value = this._area.value;
        this._area.value = "";
        this._baseHeight = this._area.offsetHeight - this._lineHeight;
        this._baseScrollHeight = this._area.scrollHeight - this._lineHeight;
        // restore initial content
        this._area.value = value;
    };
    Textarea.prototype._focusChanged = function () {
        this._updateHeight();
    };
    Textarea.prototype._updateHeight = function () {
        var hasFocus = this._area === document.activeElement;
        var maxRows, rows = 0;
        if (this._updateBaseHeight === true && Dom.isHidden(this._area, true) === false) {
            this._calculateBaseHeight();
            this._updateBaseHeight = false;
        }
        // Calculate the apropriate size for the control
        if (!this._hasValue()) {
            // Handle empty states
            rows = hasFocus === true ? this._minRows : 1;
            maxRows = rows;
        }
        else {
            // Reset the height for calculation of the row count
            this._area.style.height = "auto";
            // Get the new height
            rows = Math.ceil((this._area.scrollHeight - this._baseScrollHeight) / this._lineHeight) + 1;
            maxRows = Math.max(Math.min(this._maxRows, rows), this._minRows);
        }
        if (rows > this._maxRows) {
            this._area.style.overflow = "auto";
        }
        else {
            this._area.style.overflow = "hidden";
        }
        var height = ((maxRows - 1) * this._lineHeight) + this._baseHeight;
        this._area.style.height = height + "px";
    };
    Textarea.prototype._hasValue = function () {
        return this._area.value && this._area.value.length > 0;
    };
    Textarea.prototype._onValueChanged = function () {
        if (this._hasValue()) {
            Dom.addClass(this._area, CLASS_HAS_VALUE);
        }
        else {
            Dom.removeClass(this._area, CLASS_HAS_VALUE);
            this._area.value = "";
        }
        this._updateHeight();
    };
    /**
     * Destroys the component and clears all references.
     */
    Textarea.prototype.destroy = function () {
        window.removeEventListener("resize", this._resizeHandler);
        window.removeEventListener("orientationchange", this._resizeHandler);
        this._area.removeEventListener("focus", this._focusChangedHandler);
        this._area.removeEventListener("blur", this._focusChangedHandler);
        this._area.removeEventListener("input", this._valueChangedHandler);
        this._focusChangedHandler = null;
        this._valueChangedHander = null;
        this._area = null;
        this._minRows = null;
        this._maxRows = null;
        this._lineHeight = null;
        this._baseHeight = null;
        this._baseScrollHeight = null;
        this.element = null;
    };
    return Textarea;
}(DomElement));
export function init() {
    searchAndInitialize(".input-multiline, .input-field--multiline", function (e) {
        new Textarea(e);
    });
}
export default Textarea;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
