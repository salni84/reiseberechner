import * as tslib_1 from "tslib";
import DomElement from "../DomElement";
import { searchAndInitialize, remove } from "../Utils";
import { getAttributeReference } from "../DomFunctions";
import { tryGetData, createLegendItem, isColor, removeAllChildren } from "./ChartFunctions";
import anime from "animejs";
var QUERY_DETAIL_RIGHT = ".detail-right";
var QUERY_DETAIL_BOTTOM = ".detail-bottom";
var QUERY_PROGRESS = ".bar-chart__progress";
var CLASS_UNLIMITED = "bar-chart-horizontal--unlimited";
var CLASS_LIMITED = "bar-chart-horizontal--limited";
var CLASS_DETAIL_VALUE = "value";
var CLASS_DETAIL_UNIT = "unit";
var CLASS_INDICATOR = "indicator";
var CLASS_INDICATOR_WRAPPER = "indicator-wrapper";
var CLASS_TOOLTIP = "tooltip";
var CLASS_TOOLTIP_MULTILINE = "tooltip--multiline";
var ANIMATION_DURATION = 500;
/**
 * Bar Chart Horizontal Component.
 */
var BarChartHorizontal = /** @class */ (function (_super) {
    tslib_1.__extends(BarChartHorizontal, _super);
    /**
     * Creates and initializes the bar chart horizontal component.
     * @param {DomElement} - root element of the chart.
     */
    function BarChartHorizontal(element, data) {
        var _this = _super.call(this, element) || this;
        if (data) {
            _this._data = data;
        }
        _this._legendItems = [];
        _this._initialize();
        return _this;
    }
    BarChartHorizontal.prototype._initialize = function () {
        this._unit = this.getAttribute("data-unit") || "";
        this._maxValue = parseFloat(this.getAttribute("data-max"));
        this._precision = parseInt(this.getAttribute("data-precision"), 10) || 0;
        this._isUnlimited = this.hasClass(CLASS_UNLIMITED);
        this._isLimited = this.hasClass(CLASS_LIMITED);
        this._progessWrapper = this.element.querySelector(QUERY_PROGRESS);
        if (this._isLimited === true) {
            this._detailRight = this.element.querySelector(QUERY_DETAIL_BOTTOM);
        }
        else {
            this._detailRight = this.element.querySelector(QUERY_DETAIL_RIGHT);
        }
        if (this._isUnlimited === false && this._isLimited === false) {
            this._legend = getAttributeReference(this.element, "data-legend");
        }
        if (!this._data) {
            this._data = tryGetData(this.element);
        }
        this._render();
    };
    BarChartHorizontal.prototype._render = function () {
        var e_1, _a;
        var dataOne = this._data[0];
        var dataTwo = this._data[1];
        var tooltip = this._isLimited === false ? this._getTooltipContent(this._data) : undefined;
        var animatedValueElement;
        // Cleanup
        removeAllChildren(this._detailRight);
        removeAllChildren(this._progessWrapper);
        try {
            // Clear only own legend items
            for (var _b = tslib_1.__values(this._legendItems), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                remove(item);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this._legendItems = [];
        if (dataOne) {
            if (this._isUnlimited === false || (this._isUnlimited === true && !dataTwo)) {
                var valElement = animatedValueElement = this._createValueElement(dataOne);
                this._detailRight.appendChild(valElement);
                if (this._isLimited === false) {
                    var separatorElement = new DomElement("div")
                        .addClass(CLASS_DETAIL_UNIT)
                        .element;
                    separatorElement.innerText = " " + this._unit;
                    this._detailRight.appendChild(separatorElement);
                }
            }
            // Add the indicator
            var indicator = this._addIndicator(dataOne, tooltip);
            this._animateIndicator(indicator, 0);
            // Animate the value if required
            if (animatedValueElement && this._isLimited === true) {
                this._animateValueElement(animatedValueElement, dataOne.value);
            }
            // Add the legend
            if (this._legend) {
                var legendItem = createLegendItem(dataOne);
                this._legend.appendChild(legendItem);
                this._legendItems.push(legendItem);
                this._animateLegend(legendItem, 0);
            }
        }
        if (dataTwo) {
            var valElement = this._createValueElement(dataTwo);
            var unitElement = new DomElement("div")
                .addClass(CLASS_DETAIL_UNIT)
                .element;
            unitElement.innerText = " " + this._unit;
            this._detailRight.appendChild(valElement);
            this._detailRight.appendChild(unitElement);
            // Add the indicator
            var indicator = this._addIndicator(dataTwo, tooltip);
            this._animateIndicator(indicator, ANIMATION_DURATION);
            // Add the legend
            if (this._legend) {
                var legendItem = createLegendItem(dataTwo);
                this._legend.appendChild(legendItem);
                this._legendItems.push(legendItem);
                this._animateLegend(legendItem, ANIMATION_DURATION);
            }
        }
        if (this._isLimited === true) {
            var valElement = this._createValueElement({ value: this._maxValue });
            var unitElement = new DomElement("div")
                .addClass(CLASS_DETAIL_UNIT)
                .element;
            unitElement.innerText = " " + this._unit;
            this._detailRight.appendChild(valElement);
            this._detailRight.appendChild(unitElement);
        }
    };
    BarChartHorizontal.prototype._animateValueElement = function (animatedValueElement, toValue) {
        var counter = { var: 0 };
        anime({
            targets: counter,
            var: toValue,
            duration: ANIMATION_DURATION,
            easing: "easeOutQuint",
            round: 1,
            update: function () {
                animatedValueElement.innerText = "" + counter.var;
            }
        });
    };
    BarChartHorizontal.prototype._animateIndicator = function (indicatorWrapper, animationOffset) {
        var indicator = indicatorWrapper.getElementsByClassName("indicator")[0];
        var indicatorWidth = indicator.scrollWidth;
        indicator.style.width = "0px";
        anime({
            targets: indicator,
            duration: ANIMATION_DURATION,
            width: indicatorWidth + "px",
            easing: "easeInOutQuint",
            delay: animationOffset,
            complete: function () {
                indicator.style.width = "";
            }
        });
    };
    BarChartHorizontal.prototype._animateLegend = function (legendItem, animationOffset) {
        legendItem.style.opacity = "0";
        anime({
            targets: legendItem,
            duration: ANIMATION_DURATION,
            opacity: 1,
            easing: "easeInOutQuint",
            delay: animationOffset,
            complete: function () {
                legendItem.style.opacity = null;
            }
        });
    };
    BarChartHorizontal.prototype._createValueElement = function (data) {
        var unlimitedPrefix = "";
        if (this._isUnlimited === true) {
            unlimitedPrefix = "+";
        }
        var value = parseFloat(data.value);
        if (value <= 0) {
            if (this._precision === 0) {
                value = "0";
            }
            else {
                value = ".";
                for (var i = 0; i < this._precision; i++) {
                    value += "0";
                }
            }
        }
        else {
            value = value.toFixed(this._precision);
        }
        var valueElement = new DomElement("div")
            .addClass(CLASS_DETAIL_VALUE)
            .element;
        valueElement.innerText = "" + unlimitedPrefix + value;
        return valueElement;
    };
    BarChartHorizontal.prototype._addIndicator = function (data, tooltip) {
        var width = ((100.0 / this._maxValue) * data.value);
        var indicator = new DomElement("div")
            .addClass(CLASS_INDICATOR);
        if (isColor(data.color) === true) {
            indicator.setAttribute("style", "background-color: " + data.color + ";");
        }
        else {
            indicator.addClass(data.color);
        }
        var indicatorWrapper = new DomElement("div")
            .addClass(CLASS_INDICATOR_WRAPPER)
            .setAttribute("style", "width: " + width + "%")
            .appendChild(indicator)
            .setAttribute("onclick", "void(0)");
        if (tooltip && tooltip !== "") {
            indicatorWrapper
                .addClass(CLASS_TOOLTIP)
                .addClass(CLASS_TOOLTIP_MULTILINE)
                .setAttribute("aria-label", tooltip);
        }
        this._progessWrapper.appendChild(indicatorWrapper.element);
        return indicatorWrapper.element;
    };
    BarChartHorizontal.prototype._getTooltipContent = function (dataList) {
        var e_2, _a;
        var tooltip = "";
        try {
            for (var dataList_1 = tslib_1.__values(dataList), dataList_1_1 = dataList_1.next(); !dataList_1_1.done; dataList_1_1 = dataList_1.next()) {
                var data = dataList_1_1.value;
                tooltip += data.title + ": " + data.value + " " + this._unit + "\n";
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (dataList_1_1 && !dataList_1_1.done && (_a = dataList_1.return)) _a.call(dataList_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return tooltip.trim();
    };
    /**
     * Updates the bar chart with the specified data definitions.
     * @param {Array} - bar chart data definitions.
     */
    BarChartHorizontal.prototype.update = function (data) {
        if (data) {
            this._data = data;
        }
        this._render();
    };
    /**
     * Removes all event handlers and clears references.
     */
    BarChartHorizontal.prototype.destroy = function () {
        var e_3, _a;
        this._data = undefined;
        removeAllChildren(this._detailRight);
        removeAllChildren(this._progessWrapper);
        this._detailRight = undefined;
        this._progessWrapper = undefined;
        try {
            for (var _b = tslib_1.__values(this._legendItems), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                remove(item);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        this._legendItems = undefined;
        this._legend = undefined;
    };
    /**
     * @deprecated use destroy() instead.
     * @todo remove in version 2.0.0
     */
    BarChartHorizontal.prototype.destory = function () {
        this.destroy();
    };
    return BarChartHorizontal;
}(DomElement));
export function init() {
    searchAndInitialize(".bar-chart-horizontal", function (e) {
        new BarChartHorizontal(e);
    });
}
export default BarChartHorizontal;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
