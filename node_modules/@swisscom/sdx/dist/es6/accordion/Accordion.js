import * as tslib_1 from "tslib";
import { searchAndInitialize } from "../Utils";
import anime from "animejs";
import DomElement from "../DomElement";
import * as Dom from "../DomFunctions";
var QUERY_TOGGLE = ".accordion__toggle";
var QUERY_OPEN_SECTION = ".accordion__item.is-open";
var QUERY_COLLAPSE = ".accordion__collapse";
var CLASS_ITEM = "accordion__item";
var CLASS_OPEN = "is-open";
var CLASS_KEEP_OPEN = "accordion__keep-open";
var REGEX_HIDDEN = /accordion--hidden-.*/;
var ANIMATION_OPEN = 300;
var ANIMATION_DELAY_OPEN = 50;
var ANIMATION_VISIBLE = 150;
/**
 * The Accordion component
 */
var Accordion = /** @class */ (function (_super) {
    tslib_1.__extends(Accordion, _super);
    /**
     * Creates and initializes the Accordion component.
     * @param {DomElement} - The root element of the Accordion component.
     */
    function Accordion(element) {
        var _this = _super.call(this, element) || this;
        _this._sectionClickHandler = _this._handleSectionClick.bind(_this);
        _this._initialize();
        return _this;
    }
    /**
     * Initializes the Accordion component.
     * @private
     */
    Accordion.prototype._initialize = function () {
        var e_1, _a;
        if (this.element.className.split(" ").some(function (c) { return REGEX_HIDDEN.test(c); })) {
            var indicator = new DomElement("input")
                .setAttribute("type", "hidden")
                .addClass("js-hidden");
            this.appendChild(indicator);
            this._hiddenIndicator = indicator.element;
        }
        try {
            for (var _b = tslib_1.__values(this.element.querySelectorAll(QUERY_TOGGLE)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var toggle = _c.value;
                toggle.addEventListener("click", this._sectionClickHandler);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    Accordion.prototype._handleSectionClick = function (event) {
        if (this._hiddenIndicator) {
            var style = window.getComputedStyle(this._hiddenIndicator);
            if (style.visibility !== "visible") {
                return;
            }
        }
        var navSection = event.target.parentElement;
        while (!Dom.hasClass(navSection, CLASS_ITEM) && navSection.parentElement) {
            navSection = navSection.parentElement;
        }
        var prevSection = this.element.querySelector(QUERY_OPEN_SECTION);
        if (prevSection && prevSection !== navSection) {
            if (!Dom.hasClass(this.element, CLASS_KEEP_OPEN)) {
                this._toggleSection(prevSection);
            }
        }
        this._toggleSection(navSection);
    };
    Accordion.prototype._toggleSection = function (accSection) {
        var collapseElement = accSection.querySelector(QUERY_COLLAPSE);
        if (Dom.hasClass(accSection, CLASS_OPEN)) {
            Dom.removeClass(accSection, CLASS_OPEN);
            this._closeCollapseSection(collapseElement);
        }
        else {
            Dom.addClass(accSection, CLASS_OPEN);
            if (collapseElement) { // to ignore the case when there is no collapsible element (see sdx doku navigation, "all the basics") in a list of accordion
                this._openCollapseSection(collapseElement);
            }
        }
    };
    Accordion.prototype._openCollapseSection = function (el) {
        this._stopAnimations(el);
        el.style.display = "block";
        this.animation = anime.timeline()
            .add({
            targets: el,
            duration: ANIMATION_OPEN,
            height: el.scrollHeight + "px",
            easing: "cubicBezier(0.550, 0.085, 0.320, 1)",
            complete: function () {
                el.style.height = "auto";
                el.setAttribute("aria-expanded", "true");
                el.classList.add(CLASS_OPEN);
            }
        })
            .add({
            targets: el,
            duration: ANIMATION_VISIBLE,
            opacity: 1,
            easing: "linear",
            offset: ANIMATION_DELAY_OPEN
        });
    };
    Accordion.prototype._closeCollapseSection = function (el) {
        this._stopAnimations(el);
        this.animation = anime.timeline()
            .add({
            targets: el,
            duration: ANIMATION_OPEN,
            height: "0px",
            easing: "cubicBezier(0.550, 0.085, 0.320, 1)",
            complete: function () {
                el.style.removeProperty("display");
                el.style.removeProperty("opacity");
                el.style.removeProperty("height");
                el.setAttribute("aria-expanded", "false");
                el.classList.remove(CLASS_OPEN);
            }
        });
    };
    Accordion.prototype._stopAnimations = function (el) {
        if (this.lastAnimatedElement === el) {
            if (this.animation) {
                this.animation.pause();
            }
            anime.remove(el);
        }
        this.lastAnimatedElement = el;
    };
    /**
     * Removes all event handlers and clears references.
     */
    Accordion.prototype.destroy = function () {
        var e_2, _a;
        try {
            for (var _b = tslib_1.__values(this.element.querySelectorAll(QUERY_TOGGLE)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var toggle = _c.value;
                toggle.removeEventListener("click", this._sectionClickHandler);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        this._sectionClickHandler = null;
        this.element = null;
    };
    return Accordion;
}(DomElement));
export function init() {
    searchAndInitialize(".accordion", function (e) {
        new Accordion(e);
    });
}
export default Accordion;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
