import * as wcHelpers from "../../core/helpers/webcomponent-helpers";
export class NumericStepper {
    constructor() {
        this.invokeChangeCallback = () => null;
        this.srHintValue = "";
        this.decreaseDisabled = true;
        this.increaseDisabled = true;
        this.label = "";
        this.srHint = "";
        this.min = 1;
        this.max = 999;
        this.value = this.min;
        this.step = 1;
        this.disabled = false;
        this.valueState = 0;
    }
    changeCallbackChanged() {
        this.setInvokeChangeCallback();
    }
    valueChanged() {
        this.setValueState(this.value);
    }
    valueStateChanged() {
        this.invokeChangeCallback(this.valueState);
    }
    componentWillLoad() {
        this.setValueState(this.value);
        this.setInvokeChangeCallback();
        this.srHintValue = `${this.label} ${this.srHint}`;
    }
    setInvokeChangeCallback() {
        this.invokeChangeCallback = wcHelpers.parseFunction(this.changeCallback);
    }
    decrease() {
        this.setValueState(this.valueState - 1);
        this.el.blur();
    }
    increase() {
        this.setValueState(this.valueState + 1);
        this.el.blur();
    }
    onChange(value) {
        this.setValueState(value);
    }
    setValueState(newValue) {
        if (this.max >= newValue && newValue >= this.min) {
            this.valueState = newValue;
        }
        this.increaseDisabled = this.valueState >= this.max;
        this.decreaseDisabled = this.valueState <= this.min;
    }
    focusInputField() {
        this.sdxInputEl.focus();
    }
    getInputStyles() {
        return {
            textAlign: "center",
            padding: "0 56px"
        };
    }
    getComponentClassNames() {
        return {
            component: true
        };
    }
    getButtonClassNames(position) {
        return {
            [position]: true,
            invalid: this.valid === false
        };
    }
    render() {
        return (h("div", { class: this.getComponentClassNames() },
            this.label &&
                h("label", { class: "label", onClick: () => this.focusInputField(), "aria-hidden": "true" }, this.label),
            h("div", { class: "wrapper" },
                h("sdx-input", { srHint: this.srHintValue, type: "number", ref: (el) => this.sdxInputEl = el, inputCallback: (value) => this.onChange(parseFloat(value)), inputStyle: this.getInputStyles(), value: this.valueState.toString(), min: this.min, max: this.max, disabled: this.disabled, valid: this.valid, validationMessage: this.validationMessage }),
                h("sdx-button", { theme: "transparent", class: this.getButtonClassNames("left"), iconName: "icon-minus", iconSize: 3, disabled: this.decreaseDisabled || this.disabled, onClick: () => this.decrease(), tabindex: "-1", "aria-hidden": "true", valid: this.valid && this.validationMessage !== "" }),
                h("sdx-button", { theme: "transparent", class: this.getButtonClassNames("right"), iconName: "icon-plus", iconSize: 3, disabled: this.increaseDisabled || this.disabled, onClick: () => this.increase(), tabindex: "-1", "aria-hidden": "true", valid: this.valid && this.validationMessage !== "" }))));
    }
    static get is() { return "sdx-numeric-stepper"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "changeCallback": {
            "type": String,
            "attr": "change-callback",
            "watchCallbacks": ["changeCallbackChanged"]
        },
        "disabled": {
            "type": Boolean,
            "attr": "disabled"
        },
        "el": {
            "elementRef": true
        },
        "label": {
            "type": String,
            "attr": "label"
        },
        "max": {
            "type": Number,
            "attr": "max"
        },
        "min": {
            "type": Number,
            "attr": "min"
        },
        "srHint": {
            "type": String,
            "attr": "sr-hint"
        },
        "step": {
            "type": Number,
            "attr": "step"
        },
        "valid": {
            "type": Boolean,
            "attr": "valid"
        },
        "validationMessage": {
            "type": String,
            "attr": "validation-message"
        },
        "value": {
            "type": Number,
            "attr": "value",
            "watchCallbacks": ["valueChanged"]
        },
        "valueState": {
            "state": true,
            "watchCallbacks": ["valueStateChanged"]
        }
    }; }
    static get style() { return "/**style-placeholder:sdx-numeric-stepper:**/"; }
}
