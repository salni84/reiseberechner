@import "stylesheets/sdx/variables/global";
@import "stylesheets/sdx/variables/colors";
@import "stylesheets/sdx/variables/sizes";
@import "stylesheets/sdx/mixins/arrow";
@import "stylesheets/sdx/mixins/scroll";
@import "../../globals/scss/label";

:host {
  outline: none; // For tabindex
}

.component {
  position: relative; // For absolute .list-container

  .wrapper {
    .header-wrapper {
      // Needed for the thumb that overflows the border with 1px
      overflow: hidden;
      background: $color-white;
      color: $color-gray;
      border-radius: $border-radius;
      transition: all 200ms $standard-easing; // animate border radius

      .header {
        position: relative;

        .selection, .thumb {
          transition: all 200ms $standard-easing; // animate hover
        }

        .thumb {
          width: 34px;
          position: absolute;
          right: -1px;
          top: -1px;
          bottom: -1px;

          // Spinner
          display: flex;
          justify-content: center;
          align-items: center;

          >.icon {
            @include arrow-flat($color-int-blue);
            @include arrow-flat--down;
            width: 100%;
            transform: scale(.5);
            transform-origin: 50% 50%;
          }
        }
      }
    }

    .list-container {
      @include scroll-y-auto;
      background: $color-white;
      position: absolute;
      left: 0;
      right: 0;
      z-index: $zindex-topmost;
      box-shadow: 0 0 4px 0 rgba($color-gray, .1), inset 0 0 0 1px $color-gray-tint-8;
      max-height: 0;
      backface-visibility: hidden; // Ensure scrolling in Chrome when Select is inside a vertical scrollbar
      outline: none; // For tabindex (needed for FF only)

      .list {
        overflow: hidden; // Make border-radius clip content

        .no-matches-found {
          height: $select-height;
          display: flex;
          align-items: center;
          padding: 0 $select-inner-margin;
          color: $color-gray-tint-7;
        }
      }
    }
  }
}

// Open/opening
.component.open, .component.opening {
  .wrapper {
    .header-wrapper {
      box-shadow: 0 0 4px 0 rgba($color-gray, .1);

      .header {
        .thumb {
          >.icon {
            @include arrow-flat--up;
          }
        }
      }
    }
  }
}

// Open/opening towards top
.component.open.top, .component.opening.top {
  .wrapper {
    .header-wrapper {
      border-top-left-radius: 0;
      border-top-right-radius: 0;
    }

    .list-container {
      &, .list {
        border-radius: $border-radius $border-radius 0 0;
      }
    }
  }
}

// Open/opening towards bottom
.component.open.bottom, .component.opening.bottom {
  .wrapper {
    .header-wrapper {
      border-bottom-left-radius: 0;
      border-bottom-right-radius: 0;
    }

    .list-container {
      &, .list {
        border-radius: 0 0 $border-radius $border-radius;
      }
    }
  }
}

// Closing from top
.component.closing.top {
  .header-wrapper {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
  }

  .wrapper {
    .list-container {
      &, .list {
        border-radius: $border-radius $border-radius 0 0;
      }
    }
  }
}

// Closing from bottom
.component.closing.bottom {
  .header-wrapper {
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
  }

  .wrapper {
    .list-container {
      &, .list {
        border-radius: 0 0 $border-radius $border-radius;
      }
    }
  }
}

.component.disabled, .component.loading {
  .label, .wrapper {
    pointer-events: none;
  }
}

.component.disabled {
  cursor: not-allowed;

  .label, .wrapper .header-wrapper .header .thumb {
    opacity: 0.4;
  }
}

.component:not(.disabled):not(.loading) {
  .header-wrapper {
    .header {
      cursor: pointer;
    }
  }
}

// Hover
.component:not(.disabled):not(.loading):not(.autocomplete) {
  .header-wrapper {
    .header:hover {
      .thumb {
        >.icon {
          @include arrow-flat($color-int-blue--active);
        }
      }
    }
  }
}

.component.focus {
  sdx-validation-message {
    display: none;
  }
}

.component.dark {
  .label {
    color: $color-white;
  }
}

.component.autocomplete {
  &:not(.loading) {
    .wrapper {
      .header-wrapper {
        .header {
          padding-right: 0;
        }
      }
    }
  }
}

.component.invalid:not(.focus) {
  .header-wrapper {
    .header {
      .thumb {
        >.icon {
          @include arrow-flat($color-input-invalid-form);
        }
      }

      &:hover {
        .thumb {
          >.icon {
            @include arrow-flat($color-input-invalid-form-hover !important); // !important to override hover style
          }
        }
      }
    }
  }
}
